{"ast":null,"code":"var createStoreImpl = function createStoreImpl(createState) {\n  var state;\n  var listeners = /* @__PURE__ */new Set();\n  var setState = function setState(partial, replace) {\n    var nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      var previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\") ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach(function (listener) {\n        return listener(state, previousState);\n      });\n    }\n  };\n  var getState = function getState() {\n    return state;\n  };\n  var subscribe = function subscribe(listener) {\n    listeners.add(listener);\n    return function () {\n      return listeners.delete(listener);\n    };\n  };\n  var destroy = function destroy() {\n    if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n      console.warn(\"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\");\n    }\n    listeners.clear();\n  };\n  var api = {\n    setState: setState,\n    getState: getState,\n    subscribe: subscribe,\n    destroy: destroy\n  };\n  state = createState(setState, getState, api);\n  return api;\n};\nvar createStore = function createStore(createState) {\n  return createState ? createStoreImpl(createState) : createStoreImpl;\n};\nvar vanilla = function vanilla(createState) {\n  if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n    console.warn(\"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\");\n  }\n  return createStore(createState);\n};\nexport { createStore, vanilla as default };","map":{"version":3,"names":["createStoreImpl","createState","state","listeners","Set","setState","partial","replace","nextState","Object","is","previousState","assign","forEach","listener","getState","subscribe","add","delete","destroy","import","meta","env","MODE","console","warn","clear","api","createStore","vanilla","default"],"sources":["C:/Users/Administrador/Documents/GitHub/IRCotizadorMsp_/react-cotizador/node_modules/zustand/esm/vanilla.mjs"],"sourcesContent":["const createStoreImpl = (createState) => {\r\n  let state;\r\n  const listeners = /* @__PURE__ */ new Set();\r\n  const setState = (partial, replace) => {\r\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\r\n    if (!Object.is(nextState, state)) {\r\n      const previousState = state;\r\n      state = (replace != null ? replace : typeof nextState !== \"object\") ? nextState : Object.assign({}, state, nextState);\r\n      listeners.forEach((listener) => listener(state, previousState));\r\n    }\r\n  };\r\n  const getState = () => state;\r\n  const subscribe = (listener) => {\r\n    listeners.add(listener);\r\n    return () => listeners.delete(listener);\r\n  };\r\n  const destroy = () => {\r\n    if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\r\n      console.warn(\r\n        \"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\"\r\n      );\r\n    }\r\n    listeners.clear();\r\n  };\r\n  const api = { setState, getState, subscribe, destroy };\r\n  state = createState(setState, getState, api);\r\n  return api;\r\n};\r\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\r\nvar vanilla = (createState) => {\r\n  if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\r\n    console.warn(\r\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\"\r\n    );\r\n  }\r\n  return createStore(createState);\r\n};\r\n\r\nexport { createStore, vanilla as default };\r\n"],"mappings":"AAAA,IAAMA,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,WAAW,EAAK;EACvC,IAAIC,KAAK;EACT,IAAMC,SAAS,GAAG,eAAgB,IAAIC,GAAG,CAAC,CAAC;EAC3C,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,OAAO,EAAEC,OAAO,EAAK;IACrC,IAAMC,SAAS,GAAG,OAAOF,OAAO,KAAK,UAAU,GAAGA,OAAO,CAACJ,KAAK,CAAC,GAAGI,OAAO;IAC1E,IAAI,CAACG,MAAM,CAACC,EAAE,CAACF,SAAS,EAAEN,KAAK,CAAC,EAAE;MAChC,IAAMS,aAAa,GAAGT,KAAK;MAC3BA,KAAK,GAAG,CAACK,OAAO,IAAI,IAAI,GAAGA,OAAO,GAAG,OAAOC,SAAS,KAAK,QAAQ,IAAIA,SAAS,GAAGC,MAAM,CAACG,MAAM,CAAC,CAAC,CAAC,EAAEV,KAAK,EAAEM,SAAS,CAAC;MACrHL,SAAS,CAACU,OAAO,CAAC,UAACC,QAAQ;QAAA,OAAKA,QAAQ,CAACZ,KAAK,EAAES,aAAa,CAAC;MAAA,EAAC;IACjE;EACF,CAAC;EACD,IAAMI,QAAQ,GAAG,SAAXA,QAAQA,CAAA;IAAA,OAASb,KAAK;EAAA;EAC5B,IAAMc,SAAS,GAAG,SAAZA,SAASA,CAAIF,QAAQ,EAAK;IAC9BX,SAAS,CAACc,GAAG,CAACH,QAAQ,CAAC;IACvB,OAAO;MAAA,OAAMX,SAAS,CAACe,MAAM,CAACJ,QAAQ,CAAC;IAAA;EACzC,CAAC;EACD,IAAMK,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;IACpB,IAAI,CAACC,MAAM,CAACC,IAAI,CAACC,GAAG,IAAIF,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,IAAI,MAAM,YAAY,EAAE;MAC9DC,OAAO,CAACC,IAAI,CACV,wMACF,CAAC;IACH;IACAtB,SAAS,CAACuB,KAAK,CAAC,CAAC;EACnB,CAAC;EACD,IAAMC,GAAG,GAAG;IAAEtB,QAAQ,EAARA,QAAQ;IAAEU,QAAQ,EAARA,QAAQ;IAAEC,SAAS,EAATA,SAAS;IAAEG,OAAO,EAAPA;EAAQ,CAAC;EACtDjB,KAAK,GAAGD,WAAW,CAACI,QAAQ,EAAEU,QAAQ,EAAEY,GAAG,CAAC;EAC5C,OAAOA,GAAG;AACZ,CAAC;AACD,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAI3B,WAAW;EAAA,OAAKA,WAAW,GAAGD,eAAe,CAACC,WAAW,CAAC,GAAGD,eAAe;AAAA;AACjG,IAAI6B,OAAO,GAAG,SAAVA,OAAOA,CAAI5B,WAAW,EAAK;EAC7B,IAAI,CAACmB,MAAM,CAACC,IAAI,CAACC,GAAG,IAAIF,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,IAAI,MAAM,YAAY,EAAE;IAC9DC,OAAO,CAACC,IAAI,CACV,uGACF,CAAC;EACH;EACA,OAAOG,WAAW,CAAC3B,WAAW,CAAC;AACjC,CAAC;AAED,SAAS2B,WAAW,EAAEC,OAAO,IAAIC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}